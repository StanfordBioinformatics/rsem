#!/usr/bin/env python

from argparse import ArgumentParser
import re
import os

TPM_FIELD_INDEX = 5 #The 0-base field position of the TPM field in the data results file produced by RSEM.

def parse_dataresults(results_file):
	"""
	Function : Given an RSEM expression results file (generated by rsem-calculate-expression), parses the file into a dictionary where
						 the keys are the gene/isoform names (as opposed to the IDs). Each value is a list of the fields (the original line split by a tab).
	Args     : results-file The *isoforms.results or *genes.results file generated by rsem-calculate-expression.
	Returns  : dict. The keys are the gene/isoform names (as opposed to the IDs). Each value is a list of the fields (the original line split by a tab).
	"""
	fh = open(results_file,'r')
	fh.readline() #header
	dico = {}
	for line in fh:
		line = line.strip("\n")
		if not line:
			continue
		line = line.split("\t")
		locus_id = line[0] #remove gene id from column one, leaving the gene name (format at present is geneid_genename.)
		locus_name  = locus_id.split("_")[1] #already in upper-case.
		dico[locus_name] = line
	return dico

description = "Given two gene names and an expression results file output from rsem-calculate-expression, where one is a control and the other a treatment, generates a text file with the information to plot the TPM of the control gene vs. the treatment gene."
parser = ArgumentParser(description=description)
parser.add_argument('-r',"--rsem-results",required=True,help="The gene or isoform results file generated by rsem-calculate-expression.")
parser.add_argument('-c',"--ctl-gene-name",required=True,help="The name of the control gene.")
parser.add_argument('-t',"--treat-gene-name",required=True,help="The name of the treatment gene.")
parser.add_argument('-o','--outfile',required=True,help="Name of the output file that will contain a single line with the information to plot.")

args = parser.parse_args()
ctl_gene = args.ctl_gene_name
treat_gene = args.treat_gene_name
fout = open(args.outfile,'w')

rsem_file = args.rsem_results
rsem_res = parse_dataresults(rsem_file)

ctl_geneline = rsem_res[ctl_gene]
ctl_tpm = ctl_geneline[TPM_FIELD_INDEX]

treat_geneline = rsem_res[treat_gene]
treat_tpm = treat_geneline[TPM_FIELD_INDEX]

sample_name = os.path.basename(rsem_file).split(".")[0]
fout.write("{sample}\t{ctl_gene}\t{ctl_tpm}\t{treat_gene}\t{treat_tpm}\n".format(sample=sample_name,ctl_gene=ctl_gene,ctl_tpm=ctl_tpm,treat_gene=treat_gene,treat_tpm=treat_tpm))
fout.close()
