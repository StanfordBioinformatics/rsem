#!/usr/bin/env python

###
#Nathaniel Watson
#nathankw@stanford.edu
###

import argparse
import subprocess #used if plotting
import re
import os
import sys

TPM_FIELD_INDEX = 5 #The 0-base field position of the TPM field in the data results file produced by RSEM.

def parse_rsem_expr_results(results_file,by_name=False):
	"""
	Function : Given an RSEM expression results file (generated by rsem-calculate-expression), parses the file into a dictionary where
						 the keys are the gene/isoform names (as opposed to the IDs). Each value is a list of the fields (the original line split by a tab).
	Args     : results-file The *isoforms.results or *genes.results file generated by rsem-calculate-expression.
						 by_name - bool. True indicates to use the gene/isoform name as the key rather than the ID in the returned dict. Names will
						           only be present when the --append-names flag is set when running rsem-calculate-expression, in which case he 
											 names will be appended to the gene/isoform ID in the expression file and be separated by an underscore.
	Returns  : dict. 
	"""
	fh = open(results_file,'r')
	fh.readline() #header
	dico = {}
	for line in fh:
		line = line.strip("\n")
		if not line:
			continue
		line = line.split("\t")
		locus = line[0] 
		if by_name:
			locus  = locus.split("_")[1] #already in upper-case.
		else:
			#make sure that gene name wasn't appended anyway and remove it if so.
			locus = locus.split("_")[0]
		dico[locus] = line
	return dico

description = "Given the feature name or ID of a gene or isoform, and two expression results files output from rsem-calculate-expression, where one is a control and the other a treatment, extracts the TPM value for the specified gene/isoform in each and generates a text file that can be used as input to create a plot in a downstream script, such as plot_perc_change.r. If the --plot option is passed, then that very R script will be called."
parser = argparse.ArgumentParser(description=description,formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("-c","--control-rsem-results",required=True,help="The gene or isoform results file generated by rsem-calculate-expression.")
parser.add_argument("-s","--sample-rsem-results",required=True,help="The gene or isoform results file generated by rsem-calculate-expression.")
parser.add_argument("-f","--feature",required=True,help="The feature name or ID of the gene or isoform for which the TPM expression value will be extracted from the sample and the control.")
parser.add_argument("--by-name",action="store_true",help="Presence of this option means that the value specified in --feature is a gene or transcript name, compared to an ID.")
parser.add_argument("-o","--outfile",required=True,help="Name of the output data file that will contain a single line with the information to plot. If the --plot option was passed, a bar graph file will be output with the same name except for a .jpeg extension. ")
parser.add_argument("-p","--plot",action="store_true",help="Presence of this options indicates to plot the results as a bar graph using R by making a call to plot_perc_change.r.")

args = parser.parse_args()
feature = args.feature
outfile = args.outfile
by_name = args.by_name
plot = args.plot

ctl_mat_file = args.control_rsem_results
ctl_file_name = os.path.basename(ctl_mat_file).split(".")[0]
ctl_mat = parse_rsem_expr_results(results_file=ctl_mat_file,by_name=by_name)

sample_mat_file = args.sample_rsem_results
sample_file_name = os.path.basename(sample_mat_file).split(".")[0]
sample_mat = parse_rsem_expr_results(results_file=sample_mat_file,by_name=by_name)

try:
	ctl_dataline = ctl_mat[feature]
except KeyError:
	raise Exception("{feature} wasn't found in the file {ctl_mat_file}.".format(feature=feature,ctl_mat_file=ctl_mat_file))

ctl_tpm = ctl_dataline[TPM_FIELD_INDEX]

try:
	sample_dataline = sample_mat[feature]
except KeyError:
	raise Exception("{feature} wasn't found in the file {sample_mat_file}.".format(feature=feature,sample_mat_file=sample_mat_file))
sample_tpm = sample_dataline[TPM_FIELD_INDEX]

fout = open(outfile,'w')
out_header = "feature\tcontrol_dataset\tcontrol_tpm\ttreatment_dataset\ttreatment_tpm\n"
fout.write(out_header)
fout.write("{feature}\t{ctl}\t{ctl_tpm}\t{sample}\t{sample_tpm}\n".format(feature=feature,ctl=ctl_file_name,ctl_tpm=ctl_tpm,sample=sample_file_name,sample_tpm=sample_tpm))
fout.close()

if plot:
	jpeg_outfile = os.path.splitext(outfile)[0] + ".jpeg"
	cmd = "plot_perc_change.r --data-file={datafile} --outfile={jpeg}".format(datafile=outfile,jpeg=jpeg_outfile)
	print("Plotting results with command '{cmd}'.".format(cmd=cmd))
	popen = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	stdout,stderr = popen.communicate()
	retcode = popen.returncode
	if retcode:
		raise Exception("Plotting command '{cmd}' failed with return code {retcode}. stdout is '{stdout}'.\n stderr is '{stderr}'.".format(cmd=cmd,retcode=retcode,stdout=stdout,stderr=stderr))
