#!/usr/bin/env python

###
#Nathaniel Watson
#2017-05-17
#nathankw@stanford.edu
###

import argparse
import subprocess #used if plotting
import re
import os
import sys

TPM_FIELD_INDEX = 5 #The 0-base field position of the TPM field in the data results file produced by RSEM.

def parse_rsem_expr_results(results_file,by_name=False):
	"""
	Function : Given an RSEM expression results file (generated by rsem-calculate-expression), parses the file into a dictionary where
						 the keys are the gene/isoform names (as opposed to the IDs). Each value is a list of the fields (the original line split by a tab).
	Args     : results-file The *isoforms.results or *genes.results file generated by rsem-calculate-expression.
						 by_name - bool. True indicates to use the gene/isoform name as the key rather than the ID in the returned dict. Names will
						           only be present when the --append-names flag is set when running rsem-calculate-expression, in which case he 
											 names will be appended to the gene/isoform ID in the expression file and be separated by an underscore.
	Returns  : dict. 
	"""
	fh = open(results_file,'r')
	fh.readline() #header
	dico = {}
	for line in fh:
		line = line.strip("\n")
		if not line:
			continue
		line = line.split("\t")
		locus = line[0] 
		if by_name:
			locus  = locus.split("_")[1] #already in upper-case.
		else:
			#make sure that gene name wasn't appended anyway and remove it if so.
			locus = locus.split("_")[0]
		dico[locus] = line
	return dico

description = "Given the feature name or ID of a gene or isoform, and either the RSEM gene expression result file or the RSEM isoform expression result file output from rsem-calculate-expression, extracts the TPM value for the specified gene/isoform and prints to stdout the feature name and the tpm value, separated by a tab."
parser = argparse.ArgumentParser(description=description,formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument("-i","--infile",required=True,help="The gene or isoform results file generated by rsem-calculate-expression.")
parser.add_argument("-f","--feature",required=True,help="The feature name or ID of the gene or isoform for which the TPM expression value will be extracted from the sample and the control.")
parser.add_argument("--by-name",action="store_true",help="Presence of this option means that the value specified in --feature is a gene or transcript name, compared to an ID.")

args = parser.parse_args()
feature = args.feature
by_name = args.by_name

sample_mat_file = args.infile
sample_file_name = os.path.basename(sample_mat_file).split(".")[0]
sample_mat = parse_rsem_expr_results(results_file=sample_mat_file,by_name=by_name)

try:
	sample_dataline = sample_mat[feature]
except KeyError:
	print(feature + "\t" + "n/a")
	sys.exit(0)
	#raise Exception("{feature} wasn't found in the file {sample_mat_file}.".format(feature,sample_mat_file=sample_mat_file))
sample_tpm = sample_dataline[TPM_FIELD_INDEX]

print(feature + "\t" + sample_tpm)
